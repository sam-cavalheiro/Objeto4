// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct Fisica {
    float massa;
    float velocidade;

    float3 posicao;
};

RWStructuredBuffer<Fisica> fisicas; 

float deltaT;
float forca;
/*float2 minimoMaximoMassa;
float2 minimoMaximoVelocidade;
float Massa;
float Velocidade;
float2 ultimoValorAleatorizado = 10;*/

float rand(float2 co) {
    return(frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Fisica fisica = fisicas[id.x];

    fisica.velocidade += (forca / fisica.massa) * deltaT;
    fisica.posicao.y -= fisica.velocidade * deltaT;

    /*float _x = rand(float2(ultimoValorAleatorizado.x, fisica.massa));
    float _y = rand(float2(ultimoValorAleatorizado.y,fisica.velocidade));
    fisica.massa = minimoMaximoMassa.x + ((minimoMaximoMassa.y - minimoMaximoMassa.x) * _x);
    fisica.velocidade = minimoMaximoVelocidade.x + ((minimoMaximoVelocidade.y - minimoMaximoVelocidade.x) * _y);
    ultimoValorAleatorizado = float2(_x, _y);*/

    fisicas[id.x] = fisica;
}
